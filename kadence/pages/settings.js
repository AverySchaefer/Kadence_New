import Head from 'next/head';
import Link from 'next/link';
import { Dialog } from '@capacitor/dialog';
import styles from '@/styles/Settings.module.css';
import { useState } from 'react';
import { Inter } from '@next/font/google';

const inter = Inter({ subsets: ['latin'] });

function Header({ title, prevLink = null }) {
  return (
    <div className={styles.header}>
      {prevLink && (
        <Link href="/profile">
          <div className={styles.backButton}></div>
        </Link>
      )}
      <h1>{title}</h1>
    </div>
  );
}

function NavBar({ children }) {
  return <div className={styles.navWrapper}>{children}</div>;
}

function SubList({ addNew, remove, items }) {
  return (
    <>
      <div>
        <div className={styles.sublistContainer}>
          <ul className={styles.sublistULContainer}>
            {items.map((item, idx) => (
              <li key={`${idx} ${item}`}>
                <button
                  className={styles.sublistDelete}
                  onClick={() => remove(idx)}
                >
                  X&nbsp;
                </button>
                {item}
              </li>
            ))}
            <li>
              <button className={styles.sublistAdd} onClick={addNew}>
                + Add New
              </button>
            </li>
          </ul>
        </div>
      </div>
    </>
  );
}

function removeFromArray(arr, idx) {
  const arrayCopy = [...arr];
  arrayCopy.splice(idx, 1);
  return arrayCopy;
}

function appendToArray(arr, item) {
  return [...arr, item];
}

const lyricLanguageOptions = ['No Preference', 'English', 'Spanish', 'French'];
const genreOptions = [
  'No Preference',
  'Rock',
  'Jazz',
  'Country',
  'Pop',
  'Hip Hop',
  'Electronic',
  'Blues',
  'Classical',
  'World Music',
  'Lo-fi',
];
const moodOptions = ['Happy', 'Sad', 'Angry', 'Wistful', 'Excited', 'Anxious'];

export default function Settings() {
  const [allowExplicit, setAllowExplicit] = useState(false);
  const [lyricalVsInstrumental, setLyricalVsInstrumental] = useState(80);
  const [prefLanguage, setPrefLanguage] = useState('English');
  const [minSongLength, setMinSongLength] = useState(0);
  const [maxSongLength, setMaxSongLength] = useState(300);
  const [minPlaylistLength, setMinPlaylistLength] = useState(0);
  const [maxPlaylistLength, setMaxPlaylistLength] = useState(60);
  const [prefGenre, setPrefGenre] = useState('Lo-fi');
  const [hideFavArtists, setHideFavArtists] = useState(true);
  const [hideBlacklistedArtists, setHideBlacklistedArtists] = useState(true);
  const [hideBlacklistedSongs, setHideBlacklistedSongs] = useState(true);
  const [favArtists, setFavArtists] = useState([]);
  const [blacklistedArtists, setBlacklistedArtists] = useState([]);
  const [blacklistedSongs, setBlacklistedSongs] = useState([]);

  const [shortIntervalTime, setShortIntervalTime] = useState(5);
  const [longIntervalTime, setLongIntervalTime] = useState(10);
  const [rampUpTime, setRampUpTime] = useState(0);
  const [rampDownTime, setRampDownTime] = useState(0);
  const [prefMood, setPrefMood] = useState('Happy');
  const [zipcode, setZipcode] = useState(69420);

  function submitData() {
    const data = {
      allowExplicit,
      lyricalVsInstrumental,
      prefLanguage,
      minSongLength,
      maxSongLength,
      minPlaylistLength,
      maxPlaylistLength,
      prefGenre,
      favArtists,
      blacklistedArtists,
      blacklistedSongs,
      shortIntervalTime,
      longIntervalTime,
      rampUpTime,
      rampDownTime,
      prefMood,
      zipcode,
    };

    fetch('/', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ data }),
    })
      .then((resp) => {
        console.log('resp', resp);
        if (resp.ok) {
          return resp.json();
        }
        throw Error('Something went wrong');
      })
      .then((json) => console.log('JSON', json));
  }

  return (
    <div className={inter.className}>
      <Head>
        <title>Settings</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <section>
          <div className={styles.sticky}>
            <h2>Account Preferences</h2>
          </div>
          <div className={styles.settingsSection}>
            <p>TODO</p>
          </div>
        </section>
        <section>
          <div className={styles.sticky}>
            <h2>Song Selection Preferences</h2>
          </div>
          <div className={styles.settingsSection}>
            <div>
              <div className={styles.flexWrapper}>
                <b>Include Explicit Songs: </b>
                <select
                  className={styles.select}
                  onChange={(e) => setAllowExplicit(e.target.value === 'true')}
                  value={allowExplicit}
                >
                  <option value={true}>Yes</option>
                  <option value={false}>No</option>
                </select>
              </div>
            </div>
            <div>
              <b>Lyrical vs. Instrumental: </b>
              <div className={styles.sliderContainer}>
                <span className={styles.sliderLabel}>Lyrical</span>
                <input
                  type="range"
                  min="0"
                  max="100"
                  step="1"
                  value={lyricalVsInstrumental}
                  onChange={(e) =>
                    setLyricalVsInstrumental(parseInt(e.target.value, 10))
                  }
                />
                <span className={styles.sliderLabel}>Instrumental</span>
              </div>
            </div>
            <div>
              <div className={styles.flexWrapper}>
                <b>Preferred Language: </b>
                <select
                  className={styles.select}
                  onChange={(e) => setPrefLanguage(e.target.value)}
                  value={prefLanguage}
                >
                  {lyricLanguageOptions.map((language) => (
                    <option value={language} key={language}>
                      {language}
                    </option>
                  ))}
                </select>
              </div>
            </div>
            <div>
              <b>Song Length Preferences: </b>
              <div className={styles.subsetting}>
                <div className={styles.flexWrapper}>
                  <i>Minimum: </i>
                  <div>
                    <input
                      type="number"
                      placeholder="0"
                      value={minSongLength}
                      onChange={(e) =>
                        setMinSongLength(parseInt(e.target.value, 10) % 10000)
                      }
                    />{' '}
                    seconds
                  </div>
                </div>
                <div className={styles.flexWrapper}>
                  <i>Maximum: </i>
                  <div>
                    <input
                      type="number"
                      placeholder="300"
                      value={maxSongLength}
                      onChange={(e) =>
                        setMaxSongLength(parseInt(e.target.value, 10) % 10000)
                      }
                    />{' '}
                    seconds
                  </div>
                </div>
              </div>
            </div>
            <div>
              <b>Playlist Length Preferences: </b>
              <div className={styles.subsetting}>
                <div className={styles.flexWrapper}>
                  <i>Minimum: </i>
                  <div>
                    <input
                      type="number"
                      placeholder="0"
                      value={minPlaylistLength}
                      onChange={(e) =>
                        setMinPlaylistLength(
                          parseInt(e.target.value, 10) % 10000
                        )
                      }
                    />{' '}
                    minutes
                  </div>
                </div>
                <div className={styles.flexWrapper}>
                  <i>Maximum: </i>
                  <div>
                    <input
                      type="number"
                      placeholder="60"
                      value={maxPlaylistLength}
                      onChange={(e) =>
                        setMaxPlaylistLength(
                          parseInt(e.target.value, 10) % 10000
                        )
                      }
                    />{' '}
                    minutes
                  </div>
                </div>
              </div>
            </div>
            <div>
              <div className={styles.flexWrapper}>
                <b>Preferred Genre: </b>
                <select
                  className={styles.select}
                  onChange={(e) => setPrefGenre(e.target.value)}
                  value={prefGenre}
                >
                  {genreOptions.map((genre) => (
                    <option value={genre} key={genre}>
                      {genre}
                    </option>
                  ))}
                </select>
              </div>
            </div>
            <div>
              <div className={styles.flexWrapper}>
                <b>Favorite Artists: </b>
                <button
                  className={styles.sublistShowButton}
                  onClick={() => setHideFavArtists((current) => !current)}
                >
                  {hideFavArtists ? 'Click to show!' : 'Click to hide!'}
                </button>
              </div>
              {!hideFavArtists && (
                <SubList
                  addNew={async () => {
                    const { value, cancelled } = await Dialog.prompt({
                      title: 'Add New Artist',
                      message:
                        'What is the name of the artist you want to add?',
                    });
                    if (!cancelled && value.trim() !== '') {
                      setFavArtists(appendToArray(favArtists, value.trim()));
                    }
                  }}
                  remove={(idx) =>
                    setFavArtists(removeFromArray(favArtists, idx))
                  }
                  items={favArtists}
                />
              )}
            </div>
            <div>
              <div className={styles.flexWrapper}>
                <b>Blacklisted Artists: </b>
                <button
                  className={styles.sublistShowButton}
                  onClick={() =>
                    setHideBlacklistedArtists((current) => !current)
                  }
                >
                  {hideBlacklistedArtists ? 'Click to show!' : 'Click to hide!'}
                </button>
              </div>
              {!hideBlacklistedArtists && (
                <SubList
                  addNew={async () => {
                    const { value, cancelled } = await Dialog.prompt({
                      title: 'Blacklist New Artist',
                      message:
                        'What is the name of the artist you want to blacklist?',
                    });
                    if (!cancelled && value.trim() !== '') {
                      setBlacklistedArtists(
                        appendToArray(blacklistedArtists, value.trim())
                      );
                    }
                  }}
                  remove={(idx) =>
                    setBlacklistedArtists(
                      removeFromArray(blacklistedArtists, idx)
                    )
                  }
                  items={blacklistedArtists}
                />
              )}
            </div>
            <div>
              <div className={styles.flexWrapper}>
                <b>Blacklisted Songs: </b>
                <button
                  className={styles.sublistShowButton}
                  onClick={() => setHideBlacklistedSongs((current) => !current)}
                >
                  {hideBlacklistedSongs ? 'Click to show!' : 'Click to hide!'}
                </button>
              </div>
              {!hideBlacklistedSongs && (
                <SubList
                  addNew={async () => {
                    let { value, cancelled } = await Dialog.prompt({
                      title: 'Blacklist New Song',
                      message:
                        'What is the name of the song you want to blacklist?',
                    });
                    if (!cancelled && value.trim() !== '') {
                      const songName = value;
                      ({ value, cancelled } = await Dialog.prompt({
                        title: 'Blacklist New Song',
                        message: `What is the name of the artist who wrote "${songName}"?`,
                      }));
                      if (!cancelled && value.trim() !== '') {
                        setBlacklistedSongs(
                          appendToArray(blacklistedSongs, [
                            songName.trim(),
                            value.trim(),
                          ])
                        );
                      }
                    }
                  }}
                  remove={(idx) =>
                    setBlacklistedSongs(removeFromArray(blacklistedSongs, idx))
                  }
                  items={blacklistedSongs.map(
                    ([song, artist]) => `"${song}" by ${artist}`
                  )}
                />
              )}
            </div>
          </div>
        </section>
        <section>
          <div className={styles.sticky}>
            <h2>Mode-Specific Preferences</h2>
          </div>
          <div className={styles.settingsSection}>
            <div>
              <b>Interval Mode Times: </b>
              <div className={styles.subsetting}>
                <div className={styles.flexWrapper}>
                  <i>Short: </i>
                  <div>
                    <input
                      type="number"
                      placeholder="5"
                      value={shortIntervalTime}
                      onChange={(e) =>
                        setShortIntervalTime(
                          parseInt(e.target.value, 10) % 10000
                        )
                      }
                    />{' '}
                    minutes
                  </div>
                </div>
                <div className={styles.flexWrapper}>
                  <i>Long: </i>
                  <div>
                    <input
                      type="number"
                      placeholder="10"
                      value={longIntervalTime}
                      onChange={(e) =>
                        setLongIntervalTime(
                          parseInt(e.target.value, 10) % 10000
                        )
                      }
                    />{' '}
                    minutes
                  </div>
                </div>
              </div>
            </div>
            <div>
              <b>Fitness Mode Ramp Up/Down: </b>
              <div className={styles.subsetting}>
                <div className={styles.flexWrapper}>
                  <i>Ramp Up: </i>
                  <div>
                    <input
                      type="number"
                      placeholder="0"
                      value={rampUpTime}
                      onChange={(e) =>
                        setRampUpTime(parseInt(e.target.value, 10) % 10000)
                      }
                    />{' '}
                    minutes
                  </div>
                </div>
                <div className={styles.flexWrapper}>
                  <i>Ramp Down: </i>
                  <div>
                    <input
                      type="number"
                      placeholder="0"
                      value={rampDownTime}
                      onChange={(e) =>
                        setRampDownTime(parseInt(e.target.value, 10) % 10000)
                      }
                    />{' '}
                    minutes
                  </div>
                </div>
              </div>
            </div>
            <div>
              <div className={styles.flexWrapper}>
                <b>Mood Mode Selection: </b>
                <select
                  className={styles.select}
                  onChange={(e) => setPrefMood(e.target.value)}
                  value={prefMood}
                >
                  {moodOptions.map((mood) => (
                    <option value={mood} key={mood}>
                      {mood}
                    </option>
                  ))}
                </select>
              </div>
            </div>
            <div>
              <div className={styles.flexWrapper}>
                <b>Local Mode Zip Code: </b>
                <input
                  className={styles.zipCode}
                  type="number"
                  min="0"
                  max="99999"
                  step="1"
                  value={zipcode}
                  onChange={(e) =>
                    setZipcode(parseInt(e.target.value, 10) % 99999)
                  }
                />
              </div>
            </div>
          </div>
        </section>
      </main>
      <Header title="Settings" prevLink="/profile" />
      <NavBar>
        <button onClick={submitData}>Save Changes</button>
      </NavBar>
    </div>
  );
}
