import * as React from 'react';
import Head from 'next/head';
import Image from 'next/image';
import styles from '@/styles/Register.module.css';
import { Button } from '@mui/material';
import Switch from '@mui/material/Switch';
import Slider from '@mui/material/Slider';
import FormControlLabel from '@mui/material/FormControlLabel';
import FormControl from '@mui/material/FormControl';
import Stack from '@mui/material/Stack';
import TextField from '@mui/material/TextField';
import InputAdornment from '@mui/material/InputAdornment';
import Select from '@mui/material/Select';
import MenuItem from '@mui/material/MenuItem';
import InputLabel from '@mui/material/InputLabel';
import Textbox from '@/components/Textbox';
import TextArea from '@/components/TextArea';
import { genres, moods } from '@/lib/promptOptions';
import { useRouter } from 'next/router';
import { useState } from 'react';
import { Inter } from '@next/font/google';
import { Dialog } from '@capacitor/dialog';
import { createTheme, ThemeProvider } from '@mui/material/styles';

import NetworkAPI from '@/lib/networkAPI';

const inter = Inter({ subsets: ['latin'] });

const theme = createTheme({
    palette: {
        primary: {
            main: '#69e267',
        },
    },
});

export default function Register() {
    const [profilePrivate, setProfilePrivate] = useState(true);
    const [bio, setBio] = useState('');
    const [waitToSave, setWaitToSave] = useState(true);
    const [favoriteArtist, setFaveArtist] = useState('');
    const [favoriteAlbum, setFaveAlbum] = useState('');
    const [favoriteSong, setFaveSong] = useState('');

    const [allowExplicit, setAllowExplicit] = useState(false);
    const [lyricalInstrumental, setlyricalInstrumental] = useState(80);
    const [minSongLength, setMinSongLength] = useState(0);
    const [maxSongLength, setMaxSongLength] = useState(1800);
    const [faveGenres, setFaveGenres] = useState('jazz');
    const [faveArtists, setFaveArtists] = useState([]);

    const [intervalShort, setIntervalShort] = useState(5);
    const [intervalLong, setIntervalLong] = useState(10);
    const [mood, setMood] = useState('Happy');
    const [zipCode, setZipCode] = useState(47907);

    const router = useRouter();

    async function submitData(e) {
        e.preventDefault();

        if (minSongLength >= maxSongLength) {
            Dialog.alert({
                title: 'Invalid Settings',
                message:
                    'Your minimum song length must be less than your maximum song length!',
            });
            return;
        }

        setFaveArtists(faveArtists.push(favoriteArtist));

        try {
            const musicPrefData = {
                allowExplicit,
                lyricalInstrumental,
                minSongLength,
                maxSongLength,
                faveGenres: [faveGenres],
                faveArtists,
            };

            const { data } = await NetworkAPI.post(
                '/api/preferences/insert',
                musicPrefData
            );

            const userData = {
                username: localStorage.getItem('username'),
                private: profilePrivate,
                waitToSave,
                bio,
                musicPrefs: data.id,
                intervalShort,
                intervalLong,
                mood,
                zipCode,
                favoriteArtist,
                favoriteAlbum,
                favoriteSong,
            };
            localStorage.setItem('mood', mood);
            localStorage.setItem('waitSave', waitToSave);
            localStorage.setItem('playlistURIs', null);
            await NetworkAPI.patch('/api/users/update', userData);
            Dialog.alert({
                title: 'Success',
                message: `Settings successfully saved.`,
            });
            router.push('/platform');
        } catch (err) {
            Dialog.alert({
                title: 'Error Occurred',
                message: `Error occurred while saving: ${err.message}`,
            });
        }
    }
    return (
        <>
            <Head>
                <title>RegisterInfo</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={[inter.className, styles.regForm].join(' ')}>
                <div className={styles.formRegInfo}>
                    <h1 className={styles.title}>Get set up with</h1>
                    <Image
                        className={styles.img}
                        src="/KadenceLogo_green.svg"
                        alt="Kadence Logo"
                        width={380}
                        height={200}
                        priority
                    />
                    <br />
                    <h2>Write a short bio!</h2>
                    <form
                        className={styles.formInfo}
                        method="PATCH"
                        action="/api/users/update"
                        onSubmit={submitData}
                    >
                        <TextArea
                            name="bio"
                            placeholder="Bio"
                            onChange={(e) => setBio(e.target.value)}
                            value={bio}
                            required
                        />
                        <h3>Who is your favorite artist?</h3>
                        <Textbox
                            name="favoriteArtist"
                            type="text"
                            placeholder="Artist"
                            onChange={(e) => setFaveArtist(e.target.value)}
                            value={favoriteArtist}
                            required
                        />
                        <h3>What is your favorite song?</h3>
                        <Textbox
                            name="favoriteSong"
                            type="text"
                            placeholder="Song"
                            onChange={(e) => setFaveSong(e.target.value)}
                            value={favoriteSong}
                            required
                        />
                        <h3>What is your favorite album?</h3>
                        <Textbox
                            name="favoriteAlbum"
                            type="text"
                            placeholder="Album"
                            onChange={(e) => setFaveAlbum(e.target.value)}
                            value={favoriteAlbum}
                            required
                        />
                        <h2 style={{ marginTop: '0.5rem' }}>
                            Set your preferences!
                        </h2>
                        <ThemeProvider theme={theme}>
                            <div className={styles.switch}>
                                <FormControlLabel
                                    label="Set profile to private"
                                    control={
                                        <Switch
                                            checked={profilePrivate}
                                            name="private"
                                            color="primary"
                                            onChange={(e) =>
                                                setProfilePrivate(
                                                    e.target.checked
                                                )
                                            }
                                        />
                                    }
                                />
                                <FormControlLabel
                                    label="Wait to save playlists"
                                    control={
                                        <Switch
                                            checked={waitToSave}
                                            name="waitToSave"
                                            onChange={(e) =>
                                                setWaitToSave(e.target.checked)
                                            }
                                        />
                                    }
                                />
                                <FormControlLabel
                                    label="Allow explicit songs"
                                    control={
                                        <Switch
                                            checked={allowExplicit}
                                            name="explicit"
                                            onChange={(e) => {
                                                setAllowExplicit(
                                                    e.target.checked
                                                );
                                            }}
                                        />
                                    }
                                />
                            </div>
                            <h3>Lyrical vs. Instrumental: </h3>
                            <div className={styles.sliderContainer}>
                                <Stack
                                    spacing={2}
                                    direction="row"
                                    sx={{ mb: 1 }}
                                    alignItems="center"
                                >
                                    <i className={styles.muiSliderLabel}>
                                        Lyrical
                                    </i>
                                    <Slider
                                        min={0}
                                        step={1}
                                        max={100}
                                        value={lyricalInstrumental}
                                        onChange={(e) =>
                                            setlyricalInstrumental(
                                                parseInt(e.target.value, 10)
                                            )
                                        }
                                    />
                                    <i className={styles.muiSliderLabel}>
                                        Instrumental
                                    </i>
                                </Stack>
                            </div>
                            <div>
                                <h3>Song Length Preferences: </h3>
                                <div className={styles.subsetting}>
                                    <TextField
                                        required
                                        color="primary"
                                        focused
                                        label="Minimum"
                                        type="number"
                                        sx={{
                                            m: 1,
                                            width: '25ch',
                                            input: { color: 'white' },
                                        }}
                                        value={minSongLength}
                                        InputProps={{
                                            endAdornment: (
                                                <InputAdornment
                                                    position="end"
                                                    sx={{
                                                        color: 'primary.main',
                                                    }}
                                                >
                                                    <p>seconds</p>
                                                </InputAdornment>
                                            ),
                                        }}
                                        onChange={(e) => {
                                            let value = parseInt(
                                                e.target.value,
                                                10
                                            );

                                            if (value < 0) value = 0;
                                            if (value > 1800) value = 1800;

                                            setMinSongLength(value);
                                        }}
                                    />
                                </div>
                                <div className={styles.subsetting}>
                                    <TextField
                                        required
                                        color="primary"
                                        focused
                                        label="Maximum"
                                        type="number"
                                        sx={{
                                            m: 1,
                                            width: '25ch',
                                            input: { color: 'white' },
                                        }}
                                        value={maxSongLength}
                                        InputProps={{
                                            endAdornment: (
                                                <InputAdornment
                                                    position="end"
                                                    sx={{
                                                        color: 'primary.main',
                                                    }}
                                                >
                                                    <p>seconds</p>
                                                </InputAdornment>
                                            ),
                                        }}
                                        onChange={(e) => {
                                            let value = parseInt(
                                                e.target.value,
                                                10
                                            );

                                            if (value < 0) value = 0;
                                            if (value > 1800) value = 1800;

                                            setMaxSongLength(value);
                                        }}
                                    />
                                </div>
                            </div>

                            <div>
                                <h3>Preferred Genre:</h3>
                                <div className={styles.subsetting}>
                                    <FormControl
                                        required
                                        sx={{ m: 1, width: '25ch' }}
                                    >
                                        <InputLabel
                                            id="genre-select-input-label"
                                            sx={{ color: 'primary.main' }}
                                        >
                                            Genre
                                        </InputLabel>
                                        <Select
                                            labelId="genre-select-input-label"
                                            id="genre-select-input"
                                            value={faveGenres}
                                            label="Genre"
                                            sx={{
                                                color: 'white',
                                                '& .MuiOutlinedInput-notchedOutline':
                                                    {
                                                        borderColor:
                                                            'primary.main',
                                                    },
                                                '& .MuiSvgIcon-root': {
                                                    color: 'primary.main',
                                                },
                                            }}
                                            onChange={(e) =>
                                                setFaveGenres(e.target.value)
                                            }
                                        >
                                            {genres.map((genre) => (
                                                <MenuItem
                                                    value={genre}
                                                    key={genre}
                                                >
                                                    {genre}
                                                </MenuItem>
                                            ))}
                                        </Select>
                                    </FormControl>
                                </div>
                            </div>
                            <h2>Mode-Specific Settings!</h2>
                            <div className={styles.settingsSection}>
                                <div>
                                    <h3>Interval Mode Times: </h3>
                                    <div className={styles.subsetting}>
                                        <TextField
                                            required
                                            color="primary"
                                            focused
                                            label="Low Energy"
                                            type="number"
                                            sx={{
                                                m: 1,
                                                width: '25ch',
                                                input: { color: 'white' },
                                            }}
                                            value={intervalShort}
                                            InputProps={{
                                                endAdornment: (
                                                    <InputAdornment
                                                        position="end"
                                                        sx={{
                                                            color: 'primary.main',
                                                        }}
                                                    >
                                                        <p>minutes</p>
                                                    </InputAdornment>
                                                ),
                                            }}
                                            onChange={(e) => {
                                                let value = parseInt(
                                                    e.target.value,
                                                    10
                                                );

                                                if (value < 0) value = 0;
                                                if (value > 60) value = 60;

                                                setIntervalShort(value);
                                            }}
                                        />
                                    </div>
                                    <div className={styles.subsetting}>
                                        <TextField
                                            required
                                            color="primary"
                                            focused
                                            label="High Energy"
                                            type="number"
                                            sx={{
                                                m: 1,
                                                width: '25ch',
                                                input: { color: 'white' },
                                            }}
                                            value={intervalLong}
                                            InputProps={{
                                                endAdornment: (
                                                    <InputAdornment
                                                        position="end"
                                                        sx={{
                                                            color: 'primary.main',
                                                        }}
                                                    >
                                                        <p>minutes</p>
                                                    </InputAdornment>
                                                ),
                                            }}
                                            onChange={(e) => {
                                                let value = parseInt(
                                                    e.target.value,
                                                    10
                                                );

                                                if (value < 0) value = 0;
                                                if (value > 60) value = 60;

                                                setIntervalLong(value);
                                            }}
                                        />
                                    </div>
                                </div>

                                <div>
                                    <h3>Mood Mode Selection:</h3>
                                    <div className={styles.subsetting}>
                                        <FormControl
                                            required
                                            sx={{ m: 1, width: '25ch' }}
                                        >
                                            <InputLabel
                                                id="mood-select-input-label"
                                                sx={{ color: 'primary.main' }}
                                            >
                                                Mood
                                            </InputLabel>
                                            <Select
                                                labelId="mood-select-input-label"
                                                id="mood-select-input"
                                                value={mood}
                                                label="Mood"
                                                sx={{
                                                    color: 'white',
                                                    '& .MuiOutlinedInput-notchedOutline':
                                                        {
                                                            borderColor:
                                                                'primary.main',
                                                        },
                                                    '& .MuiSvgIcon-root': {
                                                        color: 'primary.main',
                                                    },
                                                }}
                                                onChange={(e) =>
                                                    setMood(e.target.value)
                                                }
                                            >
                                                {moods.map((m) => (
                                                    <MenuItem value={m} key={m}>
                                                        {m}
                                                    </MenuItem>
                                                ))}
                                            </Select>
                                        </FormControl>
                                    </div>
                                </div>
                                <div>
                                    <h3>Local Mode Zip Code:</h3>
                                    <div className={styles.subsetting}>
                                        <TextField
                                            required
                                            color="primary"
                                            focused
                                            label="Zip Code"
                                            type="number"
                                            sx={{
                                                m: 1,
                                                width: '25ch',
                                                input: { color: 'white' },
                                            }}
                                            value={zipCode}
                                            InputProps={{}}
                                            onChange={(e) => {
                                                let value = parseInt(
                                                    e.target.value,
                                                    10
                                                );

                                                if (value < 0) value = 0;
                                                if (value > 99999)
                                                    value = 99999;

                                                setZipCode(value);
                                            }}
                                        />
                                    </div>
                                </div>
                            </div>
                        </ThemeProvider>
                        <div className={styles.center}>
                            <Button
                                variant="contained"
                                sx={{
                                    backgroundColor: '#69e267',
                                    color: '#242b2e',
                                    width: '100%',
                                    '&:active': { backgroundColor: '#69e267' },
                                }}
                                type="submit"
                            >
                                Next
                            </Button>
                        </div>
                    </form>
                </div>
            </main>
        </>
    );
}
